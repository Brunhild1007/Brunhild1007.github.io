<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQLI</title>
      <link href="/2020/07/17/sqli/"/>
      <url>/2020/07/17/sqli/</url>
      
        <content type="html"><![CDATA[<h1 id="SQLI"><a href="#SQLI" class="headerlink" title="SQLI"></a>SQLI</h1><hr><p>之前搭建了一个sqli靶场但一直没时间做，现在有空来做下，并且记录记下解题的过程</p><h2 id="Page-1-Basic-Challenges"><a href="#Page-1-Basic-Challenges" class="headerlink" title="Page-1(Basic Challenges)"></a>Page-1(Basic Challenges)</h2><p>Less-1 GET - Error based - Single quotes - String(基于错误的GET单引号字符型注入)</p><h3 id="Less-2-GET-Error-based-Intiger-based-基于错误的GET整型注入"><a href="#Less-2-GET-Error-based-Intiger-based-基于错误的GET整型注入" class="headerlink" title="Less-2 GET - Error based - Intiger based (基于错误的GET整型注入)"></a>Less-2 GET - Error based - Intiger based (基于错误的GET整型注入)</h3><h3 id="Less-3-GET-Error-based-Single-quotes-with-twist-string-基于错误的GET单引号变形字符型注入"><a href="#Less-3-GET-Error-based-Single-quotes-with-twist-string-基于错误的GET单引号变形字符型注入" class="headerlink" title="Less-3 GET - Error based - Single quotes with twist string (基于错误的GET单引号变形字符型注入)"></a>Less-3 GET - Error based - Single quotes with twist string (基于错误的GET单引号变形字符型注入)</h3><h3 id="Less-4-GET-Error-based-Double-Quotes-String-（基于错误的GET双引号字符型注入）"><a href="#Less-4-GET-Error-based-Double-Quotes-String-（基于错误的GET双引号字符型注入）" class="headerlink" title="Less-4 GET - Error based - Double Quotes - String （基于错误的GET双引号字符型注入）"></a>Less-4 GET - Error based - Double Quotes - String （基于错误的GET双引号字符型注入）</h3><h3 id="Less-5-GET-Double-Injection-Single-Quotes-String-双注入GET单引号字符型注入"><a href="#Less-5-GET-Double-Injection-Single-Quotes-String-双注入GET单引号字符型注入" class="headerlink" title="Less-5 GET - Double Injection - Single Quotes - String (双注入GET单引号字符型注入)"></a>Less-5 GET - Double Injection - Single Quotes - String (双注入GET单引号字符型注入)</h3><h3 id="Less-6-GET-Double-Injection-Double-Quotes-String-双注入GET双引号字符型注入"><a href="#Less-6-GET-Double-Injection-Double-Quotes-String-双注入GET双引号字符型注入" class="headerlink" title="Less-6 GET - Double Injection - Double Quotes - String (双注入GET双引号字符型注入)"></a>Less-6 GET - Double Injection - Double Quotes - String (双注入GET双引号字符型注入)</h3><h3 id="Less-7-GET-Dump-into-outfile-String-（导出文件GET字符型注入）"><a href="#Less-7-GET-Dump-into-outfile-String-（导出文件GET字符型注入）" class="headerlink" title="Less-7 GET - Dump into outfile - String （导出文件GET字符型注入）"></a>Less-7 GET - Dump into outfile - String （导出文件GET字符型注入）</h3><h3 id="Less-8-GET-Blind-Boolian-Based-Single-Quotes-布尔型单引号GET盲注"><a href="#Less-8-GET-Blind-Boolian-Based-Single-Quotes-布尔型单引号GET盲注" class="headerlink" title="Less-8 GET - Blind - Boolian Based - Single Quotes (布尔型单引号GET盲注)"></a>Less-8 GET - Blind - Boolian Based - Single Quotes (布尔型单引号GET盲注)</h3><h3 id="Less-9-GET-Blind-Time-based-Single-Quotes-基于时间的GET单引号盲注"><a href="#Less-9-GET-Blind-Time-based-Single-Quotes-基于时间的GET单引号盲注" class="headerlink" title="Less-9 GET - Blind - Time based. -  Single Quotes  (基于时间的GET单引号盲注)"></a>Less-9 GET - Blind - Time based. -  Single Quotes  (基于时间的GET单引号盲注)</h3><h3 id="Less-10-GET-Blind-Time-based-double-quotes-基于时间的双引号盲注"><a href="#Less-10-GET-Blind-Time-based-double-quotes-基于时间的双引号盲注" class="headerlink" title="Less-10 GET - Blind - Time based - double quotes (基于时间的双引号盲注)"></a>Less-10 GET - Blind - Time based - double quotes (基于时间的双引号盲注)</h3><h3 id="Less-11-POST-Error-Based-Single-quotes-String-基于错误的POST型单引号字符型注入"><a href="#Less-11-POST-Error-Based-Single-quotes-String-基于错误的POST型单引号字符型注入" class="headerlink" title="Less-11 POST - Error Based - Single quotes- String (基于错误的POST型单引号字符型注入)"></a>Less-11 POST - Error Based - Single quotes- String (基于错误的POST型单引号字符型注入)</h3><h3 id="Less-12-POST-Error-Based-Double-quotes-String-with-twist-基于错误的双引号POST型字符型变形的注入"><a href="#Less-12-POST-Error-Based-Double-quotes-String-with-twist-基于错误的双引号POST型字符型变形的注入" class="headerlink" title="Less-12 POST - Error Based - Double quotes- String-with twist (基于错误的双引号POST型字符型变形的注入)"></a>Less-12 POST - Error Based - Double quotes- String-with twist (基于错误的双引号POST型字符型变形的注入)</h3><h3 id="Less-13-POST-Double-Injection-Single-quotes-String-twist-POST单引号变形双注入"><a href="#Less-13-POST-Double-Injection-Single-quotes-String-twist-POST单引号变形双注入" class="headerlink" title="Less-13 POST - Double Injection - Single quotes- String -twist (POST单引号变形双注入)"></a>Less-13 POST - Double Injection - Single quotes- String -twist (POST单引号变形双注入)</h3><h3 id="Less-14-POST-Double-Injection-Single-quotes-String-twist-POST单引号变形双注入"><a href="#Less-14-POST-Double-Injection-Single-quotes-String-twist-POST单引号变形双注入" class="headerlink" title="Less-14 POST - Double Injection - Single quotes-  String -twist (POST单引号变形双注入)"></a>Less-14 POST - Double Injection - Single quotes-  String -twist (POST单引号变形双注入)</h3><h3 id="less-15-POST-Blind-Boolian-time-Based-Single-quotes-基于bool型-时间延迟单引号POST型盲注"><a href="#less-15-POST-Blind-Boolian-time-Based-Single-quotes-基于bool型-时间延迟单引号POST型盲注" class="headerlink" title="less-15 POST - Blind- Boolian/time Based - Single quotes (基于bool型/时间延迟单引号POST型盲注)"></a>less-15 POST - Blind- Boolian/time Based - Single quotes (基于bool型/时间延迟单引号POST型盲注)</h3><h3 id="Less-16-POST-Blind-Boolian-Time-Based-Double-quotes-基于bool型-时间延迟的双引号POST型盲注"><a href="#Less-16-POST-Blind-Boolian-Time-Based-Double-quotes-基于bool型-时间延迟的双引号POST型盲注" class="headerlink" title="Less-16 POST - Blind- Boolian/Time Based - Double quotes (基于bool型/时间延迟的双引号POST型盲注)"></a>Less-16 POST - Blind- Boolian/Time Based - Double quotes (基于bool型/时间延迟的双引号POST型盲注)</h3><h3 id="Less-17-POST-Update-Query-Error-Based-String-基于错误的更新查询POST注入"><a href="#Less-17-POST-Update-Query-Error-Based-String-基于错误的更新查询POST注入" class="headerlink" title="Less-17 POST - Update Query- Error Based - String (基于错误的更新查询POST注入)"></a>Less-17 POST - Update Query- Error Based - String (基于错误的更新查询POST注入)</h3><h3 id="Less-18-POST-Header-Injection-Uagent-field-Error-based-基于错误的用户代理，头部POST注入"><a href="#Less-18-POST-Header-Injection-Uagent-field-Error-based-基于错误的用户代理，头部POST注入" class="headerlink" title="Less-18 POST - Header Injection - Uagent field - Error based (基于错误的用户代理，头部POST注入)"></a>Less-18 POST - Header Injection - Uagent field - Error based (基于错误的用户代理，头部POST注入)</h3><h3 id="Less-19-POST-Header-Injection-Referer-field-Error-based-基于头部的Referer-POST报错注入"><a href="#Less-19-POST-Header-Injection-Referer-field-Error-based-基于头部的Referer-POST报错注入" class="headerlink" title="Less-19 POST - Header Injection - Referer field - Error based (基于头部的Referer POST报错注入)"></a>Less-19 POST - Header Injection - Referer field - Error based (基于头部的Referer POST报错注入)</h3><hr><h2 id="Page-2-Advanced-Injections"><a href="#Page-2-Advanced-Injections" class="headerlink" title="Page-2 (Advanced Injections)"></a>Page-2 (Advanced Injections)</h2><h3 id="Less-20-POST-Cookie-injections-Uagent-field-Error-based-基于错误的cookie头部POST注入"><a href="#Less-20-POST-Cookie-injections-Uagent-field-Error-based-基于错误的cookie头部POST注入" class="headerlink" title="Less-20 POST - Cookie injections - Uagent field  - Error based (基于错误的cookie头部POST注入)"></a>Less-20 POST - Cookie injections - Uagent field  - Error based (基于错误的cookie头部POST注入)</h3><h3 id="Less-21-Cookie-Injection-Error-Based-complex-string-基于错误的复杂的字符型Cookie注入"><a href="#Less-21-Cookie-Injection-Error-Based-complex-string-基于错误的复杂的字符型Cookie注入" class="headerlink" title="Less-21 Cookie Injection- Error Based- complex - string ( 基于错误的复杂的字符型Cookie注入)"></a>Less-21 Cookie Injection- Error Based- complex - string ( 基于错误的复杂的字符型Cookie注入)</h3><h3 id="Less-22-Cookie-Injection-Error-Based-Double-Quotes-string-基于错误的双引号字符型Cookie注入"><a href="#Less-22-Cookie-Injection-Error-Based-Double-Quotes-string-基于错误的双引号字符型Cookie注入" class="headerlink" title="Less-22 Cookie Injection- Error Based- Double Quotes - string (基于错误的双引号字符型Cookie注入)"></a>Less-22 Cookie Injection- Error Based- Double Quotes - string (基于错误的双引号字符型Cookie注入)</h3><h3 id="Less-23-GET-Error-based-strip-comments-基于错误的，过滤注释的GET型"><a href="#Less-23-GET-Error-based-strip-comments-基于错误的，过滤注释的GET型" class="headerlink" title="Less-23 GET - Error based - strip comments (基于错误的，过滤注释的GET型)"></a>Less-23 GET - Error based - strip comments (基于错误的，过滤注释的GET型)</h3><h3 id="Less-24-Second-Degree-Injections-Real-treat-Store-Injections-二次注入"><a href="#Less-24-Second-Degree-Injections-Real-treat-Store-Injections-二次注入" class="headerlink" title="Less - 24 Second Degree Injections  Real treat -Store Injections (二次注入)"></a>Less - 24 Second Degree Injections  <em>Real treat</em> -Store Injections (二次注入)</h3><h3 id="Less-25-Trick-with-OR-amp-AND-过滤了or和and"><a href="#Less-25-Trick-with-OR-amp-AND-过滤了or和and" class="headerlink" title="Less-25 Trick with OR &amp; AND (过滤了or和and)"></a>Less-25 Trick with OR &amp; AND (过滤了or和and)</h3><h3 id="Less-25a-Trick-with-OR-amp-AND-Blind-（过滤了or和and的盲注）"><a href="#Less-25a-Trick-with-OR-amp-AND-Blind-（过滤了or和and的盲注）" class="headerlink" title="Less-25a Trick with OR &amp; AND Blind （过滤了or和and的盲注）"></a>Less-25a Trick with OR &amp; AND Blind （过滤了or和and的盲注）</h3><h3 id="Less-26-failed-Trick-with-comments-and-space-过滤了注释和空格的注入"><a href="#Less-26-failed-Trick-with-comments-and-space-过滤了注释和空格的注入" class="headerlink" title="Less-26(failed) Trick with comments and space (过滤了注释和空格的注入)"></a>Less-26(failed) Trick with comments and space (过滤了注释和空格的注入)</h3><h3 id="less-26-Trick-with-comments-and-space-过滤了注释和空格的注入"><a href="#less-26-Trick-with-comments-and-space-过滤了注释和空格的注入" class="headerlink" title="less 26  Trick with comments and space (过滤了注释和空格的注入)"></a>less 26  Trick with comments and space (过滤了注释和空格的注入)</h3><h3 id="less-26a-GET-Blind-Based-All-your-SPACES-and-COMMENTS-belong-to-us-过滤了空格和注释的盲注"><a href="#less-26a-GET-Blind-Based-All-your-SPACES-and-COMMENTS-belong-to-us-过滤了空格和注释的盲注" class="headerlink" title="less 26a GET - Blind Based - All your SPACES and COMMENTS belong to us(过滤了空格和注释的盲注)"></a>less 26a GET - Blind Based - All your SPACES and COMMENTS belong to us(过滤了空格和注释的盲注)</h3><h3 id="less-27-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-（过滤了union和select的）"><a href="#less-27-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-（过滤了union和select的）" class="headerlink" title="less 27 GET - Error Based- All your UNION &amp; SELECT belong to us （过滤了union和select的）"></a>less 27 GET - Error Based- All your UNION &amp; SELECT belong to us （过滤了union和select的）</h3><h3 id="less-27a-GET-Blind-Based-All-your-UNION-amp-SELECT-belong-to-us"><a href="#less-27a-GET-Blind-Based-All-your-UNION-amp-SELECT-belong-to-us" class="headerlink" title="less 27a GET - Blind Based- All your UNION &amp; SELECT belong to us"></a>less 27a GET - Blind Based- All your UNION &amp; SELECT belong to us</h3><h3 id="less-28-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入"><a href="#less-28-GET-Error-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入" class="headerlink" title="less 28 GET - Error Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入"></a>less 28 GET - Error Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis基于错误的，有括号的单引号字符型，过滤了union和select等的注入</h3><h3 id="less-28a-GET-Bind-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis基于盲注的，有括号的单引号字符型，过滤了union和select等的注入"><a href="#less-28a-GET-Bind-Based-All-your-UNION-amp-SELECT-belong-to-us-String-Single-quote-with-parenthesis基于盲注的，有括号的单引号字符型，过滤了union和select等的注入" class="headerlink" title="less 28a GET - Bind Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis基于盲注的，有括号的单引号字符型，过滤了union和select等的注入"></a>less 28a GET - Bind Based- All your UNION &amp; SELECT belong to us String-Single quote with parenthesis基于盲注的，有括号的单引号字符型，过滤了union和select等的注入</h3><h3 id="Less-29-基于WAF的一个错误"><a href="#Less-29-基于WAF的一个错误" class="headerlink" title="Less-29 基于WAF的一个错误"></a>Less-29 基于WAF的一个错误</h3><h3 id="Less-30-Get-Blind-Havaing-with-WAF"><a href="#Less-30-Get-Blind-Havaing-with-WAF" class="headerlink" title="Less-30 Get-Blind Havaing with WAF"></a>Less-30 Get-Blind Havaing with WAF</h3><h3 id="Less-31-Protection-with-WAF"><a href="#Less-31-Protection-with-WAF" class="headerlink" title="Less-31 Protection with WAF"></a>Less-31 Protection with WAF</h3><h3 id="Less-32-Bypass-addslashes"><a href="#Less-32-Bypass-addslashes" class="headerlink" title="Less-32 Bypass addslashes()"></a>Less-32 Bypass addslashes()</h3><h3 id="Less-33-Bypass-addslashes"><a href="#Less-33-Bypass-addslashes" class="headerlink" title="Less-33 Bypass addslashes()"></a>Less-33 Bypass addslashes()</h3><h3 id="Less-34-Bypass-Add-SLASHES"><a href="#Less-34-Bypass-Add-SLASHES" class="headerlink" title="Less-34 Bypass Add SLASHES"></a>Less-34 Bypass Add SLASHES</h3><h3 id="Less-35-why-care-for-addslashes"><a href="#Less-35-why-care-for-addslashes" class="headerlink" title="Less-35 why care for addslashes()"></a>Less-35 why care for addslashes()</h3>]]></content>
      
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spider</title>
      <link href="/2020/07/16/Spider/"/>
      <url>/2020/07/16/Spider/</url>
      
        <content type="html"><![CDATA[<h1 id="PythonSpider"><a href="#PythonSpider" class="headerlink" title="PythonSpider"></a>PythonSpider</h1><h2 id="Requests"><a href="#Requests" class="headerlink" title="Requests"></a>Requests</h2><h3 id="content-amp-text"><a href="#content-amp-text" class="headerlink" title=".content &amp; .text"></a>.content &amp; .text</h3><p>requests对象的get和post方法都会返回一个Response对象，这个对象里面存的是服务器返回的所有信息，包括响应头，响应状态码等。其中返回的网页部分会存在.content和.text两个对象中。</p><p>.content中间存的是字节码 .text存的是.content编码后的字符串</p><p>一般来说 .text直接用比较方便 返回的是字符串 但是有时候会解析不正常导致</p><p>返回的是一堆乱码这时用.content.decode(‘utf-8’)就可以使其显示正常。</p><p>总的来说.text是现成的字符串，.content还要编码，但是.text不是所有时候显示都正常，这是就需要用.content进行手动编码。</p><p>————————————————<br>原文链接：<a href="https://blog.csdn.net/i_python_han/article/details/80803923" target="_blank" rel="noopener">https://blog.csdn.net/i_python_han/article/details/80803923</a></p><h2 id="BeautifulSoup4"><a href="#BeautifulSoup4" class="headerlink" title="BeautifulSoup4"></a>BeautifulSoup4</h2><p>这里是一个用美丽汤组件来实现的爬取百度贴吧图片的栗子</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#导入第三方包和模块</span><span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token comment" spellcheck="true">#在本地新建一个文件夹，命名为test_img2，用以保存下载的图片</span>folder<span class="token operator">=</span><span class="token string">'test_img2'</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>folder<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>folder<span class="token punctuation">)</span>img_url<span class="token operator">=</span><span class="token string">'https://tieba.baidu.com/p/5244323371?pn='</span>header<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#定义一个函数，用以下载图片</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>    name<span class="token operator">=</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    f<span class="token operator">=</span>open<span class="token punctuation">(</span>folder<span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>name<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#处理返回的html页面然后提取图片url并且调用download函数</span><span class="token keyword">def</span> <span class="token function">soup</span><span class="token punctuation">(</span>img_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img_url_i<span class="token operator">=</span>img_url<span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>img_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>        img_html_i<span class="token operator">=</span>r<span class="token punctuation">.</span>text                      img_bs4_i<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>img_html_i<span class="token punctuation">,</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span>        img_list<span class="token operator">=</span>img_bs4_i<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">,</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span><span class="token string">'BDE_Image'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> img <span class="token keyword">in</span> img_list<span class="token punctuation">:</span>            img_src<span class="token operator">=</span>img<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>img_src<span class="token punctuation">)</span>            download<span class="token punctuation">(</span>img_src<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    soup<span class="token punctuation">(</span>img_url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>说下代码的思路，核心就是download，就是请求百度贴吧获取返回内容并且下载下来。</p><p>但问题是我们不知道图片的url是多少，我们要通过贴吧的url访问贴吧得到返回的html代码，这个html页面中包含着图片的地址</p><p>如图所示：</p><p><img src="/2020/07/16/Spider/1.jpg" alt="1"></p><p>可以看到标签为img属性为class=”BDE_Image”，url为<a href="https://imgsa.baidu.com/forum/w%3D580/sign=72cfbf7dadefce1bea2bc8c29f50f3e8/1ea6750e0cf3d7ca99ebc3fdf81fbe096a63a9a5.jpg" target="_blank" rel="noopener">https://imgsa.baidu.com/forum/w%3D580/sign=72cfbf7dadefce1bea2bc8c29f50f3e8/1ea6750e0cf3d7ca99ebc3fdf81fbe096a63a9a5.jpg</a></p><p>我们访问贴吧的url然后把得到的结果放入美丽汤函数中，得到了一个内容完整，格式规范的html页面，于是调用这个页面的方法findAll(),找到所有标签为img属性为class=”BDE_Image”的字符串并返回一个列表，接下来调用这个列表的方法get()来获得字符串中src部分也就是图片的url。</p><p>到此为止调用download函数下载图片</p><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h2 id="selenium-amp-ghost"><a href="#selenium-amp-ghost" class="headerlink" title="selenium &amp; ghost"></a>selenium &amp; ghost</h2><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h2 id="ip代理池"><a href="#ip代理池" class="headerlink" title="ip代理池"></a>ip代理池</h2><h2 id="django-amp-flask"><a href="#django-amp-flask" class="headerlink" title="django &amp; flask"></a>django &amp; flask</h2><h2 id="scrapy-pyspider"><a href="#scrapy-pyspider" class="headerlink" title="scrapy.pyspider"></a>scrapy.pyspider</h2>]]></content>
      
      
      
        <tags>
            
            <tag> python脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytips</title>
      <link href="/2020/07/16/Pytips/"/>
      <url>/2020/07/16/Pytips/</url>
      
        <content type="html"><![CDATA[<p>a=[]<br>b={‘name’:’fokil’}<br>a.append(b.copy())<br>和<br>a={‘name’:[]}<br>a[‘name’].append(‘fokil’)<br>这两种方式的不同和各自的适用范围，举例说明</p><p>最本质的bai区别：第一种方法得出的a是列表，而第二du种的a是字典<br>用python语句zhi表达来看就是：<br>1.type(a) == list<br>2.type(a) == dict<br>在交互式界dao面下显示：<br>第一种：</p><blockquote><blockquote><blockquote><p>a<br>[{‘name’:’fokil’}]<br>此时a是一个列表，他具有列表的一切方法和属性，但不具备任何字典的方法和属性。列表可以有N个元素，元素的类型是任意的，与列表本身无关。而此时的a有一个元素，该元素是一个字典——但这并不代表整个列表a带有任何字典的性质。明白？<br>第二种：<br>a<br>{‘name’:[‘fokil’]}<br>同上，此时a是一个字典，具有字典的一切方法和属性，但不具备任何列表的方法和属性。字典可以有N个元素，每个元素由一对key和内容的组合构成。key可以是任何单一对象的类型（不能是列表或字典——但可以是元组。当然，还可以是数字、字符/字符串，甚至是文件对象），而key对应的内容则可以是任意类型的。在此时，a中只有一个元素，key是一个字符串，而内容则是一个含有一个字符串元素的列表——同样，这不意味着a具有任何的列表性质<br>总而言之，严格的讲：没有“字典列表”或“列表字典”这种概念<br>只有一个列表，他包含的元素的类型是字典——当然，列表中的元素可以是不同类型的，譬如：<br>a = [1, ‘test’, [2,3,4], {‘name’:’fokil’}]<br>同理，只有一个字典，他包含的元素中的一部分是列表（当然，key部分不可能是列表）。当然，也有可能是不同类型的元素：<br>a = {1:’b’,(1,2,3):[4,5,6],’test’:{‘test2’:[‘test3’]}}</p></blockquote></blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> python脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ics-05</title>
      <link href="/2020/07/10/ics-05/"/>
      <url>/2020/07/10/ics-05/</url>
      
        <content type="html"><![CDATA[<h1 id="ics-05"><a href="#ics-05" class="headerlink" title="ics-05"></a>ics-05</h1><p>本题目一开始拿到我的思路是先到处看看，无意中点到了左上角的图片然后url有了变化</p><p><img src="/2020/07/10/ics-05/1.JPG" alt="1"></p><p>url后面有一个get传参</p><p><img src="/2020/07/10/ics-05/1.1.JPG" alt="1.1"></p><p>于是我觉得可能是sql注入，但是不管是手动注入还是sqlmap跑都没有结果，后来参考网上<a href="https://www.jianshu.com/p/5a502873635b才知道这是一个本地文件包含漏洞" target="_blank" rel="noopener">https://www.jianshu.com/p/5a502873635b才知道这是一个本地文件包含漏洞</a></p><p>附：</p><p>LFI漏洞的黑盒判断方法：<br>单纯的从URL判断的话，URL中path、dir、file、pag、page、archive、p、eng、语言文件等相关关键字眼的时候,可能存在文件包含漏洞。</p><p>看了攻略之后我知道该怎么做了</p><p>首先是查看index.php的源代码，通过php内置协议直接读取代码</p><pre class=" language-mssql"><code class="language-mssql">?page=php://filter/read=convert.base64-encode/resource=index.php</code></pre><p>输入之后得到如下结果</p><p><img src="/2020/07/10/ics-05/4.JPG" alt="4"></p><p>很明显这是经过base64加密的，经过解密后得到了源码，其中重要的是如下的代码</p><p><img src="/2020/07/10/ics-05/5.JPG" alt></p><p>这个代码的意思是如果X-Forwarded-For===127.0.0.1则会进入这个Admin页面，这个页面里面有个函数是preg_replace()</p><p>这个函数是先从subject中找到符合pattern的字符串并把这个字符串替换为replacement。</p><pre class=" language-php"><code class="language-php">函数作用：搜索subject中匹配pattern的部分， 以replacement进行替换。<span class="token variable">$pattern</span><span class="token punctuation">:</span> 要搜索的模式，可以是字符串或一个字符串数组。<span class="token variable">$replacement</span><span class="token punctuation">:</span> 用于替换的字符串或字符串数组。<span class="token variable">$subject</span><span class="token punctuation">:</span> 要搜索替换的目标字符串或字符串数组。</code></pre><p>preg_replace函数存在命令执行漏洞<br>此处明显考察的是preg_replace 函数使用 <code>/e</code>模式，导致代码执行的问题。</p><p> <strong>/e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）。/e放在pattern中。提示：要确保 replacement 构成一个合法的 PHP 代码字符串，否则 PHP 会在报告在包含 preg_replace() 的行中出现语法解析错误。</strong></p><p>于是通过burp抓包构造get传参，如图所示</p><p><img src="/2020/07/10/ics-05/6.JPG" alt="6"></p><p>这里的php代码为phpinfo(),很明显执行了这句代码，于是接下来就用system(“ls”)查看该目录下的其他文件</p><p><img src="/2020/07/10/ics-05/7.JPG" alt="7"></p><p><img src="/2020/07/10/ics-05/8.JPG" alt="6"></p><p><img src="/2020/07/10/ics-05/9.JPG" alt="9"></p><p><img src="/2020/07/10/ics-05/10.JPG" alt="10"></p><p>找到flag</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本题考查的点为</p><p><strong>1.文件包含漏洞<br>2.PHP伪协议中的 [php://filter]<br>3.preg_replace函数引发的命令执行漏洞</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> XCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ics-04</title>
      <link href="/2020/07/10/ics-04-1/"/>
      <url>/2020/07/10/ics-04-1/</url>
      
        <content type="html"><![CDATA[<p>{}</p><h2 id="date-2020-07-10-12-03-16"><a href="#date-2020-07-10-12-03-16" class="headerlink" title="date: 2020-07-10 12:03:16"></a>date: 2020-07-10 12:03:16</h2><hr><h1 id="ics-04"><a href="#ics-04" class="headerlink" title="ics-04"></a>ics-04</h1><p>这是攻防世界的一道关于sql注入的题目</p><p>一下是分析过程</p><p>首先题目告诉我们漏洞出现在登录和注册这两个地方</p><p>然后就在登录和注册这两个地方测试发现没什么问题</p><p>注册这个地方可以一个用户名重复注册，而且存在xss注入，按照之前做靶场的方法试了一下发现xss不行不返回cookie信息，不过xss没什么用。</p><p>之后发现了一个叫忘记密码的地方，在这里输入账号信息就能出发xss不过这对我们拿到flag没有帮助。后来在网上搜索攻略发现这里存在sql注入，先是输入 ‘ or 1 = 1 ; #  发现确实存在，于是接下来可以手动注入也可以用sqlmap注入，</p><h2 id="sqlmap注入"><a href="#sqlmap注入" class="headerlink" title="sqlmap注入"></a>sqlmap注入</h2><p>sqlmap注入的话输入如下语句</p><pre class=" language-mssql"><code class="language-mssql">python sqlmap.py -u http://220.249.52.133:43366/findpwd.php --data username=1 --dbs</code></pre><p>得到了数据库的库名</p><p><img src="/2020/07/10/ics-04-1/%E5%BA%93%E5%90%8D.JPG" alt></p><p>发现数据库库名为cetc004</p><p>于是接下来再用sqlmap跑</p><pre class=" language-mssql"><code class="language-mssql">python sqlmap.py -u http://220.249.52.133:43366/findpwd.php --data username=1 -D cetc004 --dump</code></pre><p><img src="/2020/07/10/ics-04-1/%E8%A1%A8%E5%90%8D%E5%92%8C%E5%AD%97%E6%AE%B5%E5%90%8D.JPG" alt="表名和字段名"></p><p>得到详细数据，发现含有flag的用户名为 cdwcewf2e323 而且密码也爆破出来了</p><h2 id="手动注入"><a href="#手动注入" class="headerlink" title="手动注入"></a>手动注入</h2><p>注入点在忘记密码页面</p><p><img src="/2020/07/10/ics-04-1/1.1.JPG" alt="1.1"></p><p>发现可以注入</p><img src="/2020/07/10/ics-04-1/1.2.JPG" alt="1.2" style="zoom:80%;"><p>于是尝试爆字段长度</p><p><img src="/2020/07/10/ics-04-1/1.3.JPG" alt="1.3"></p><p>发现并不行</p><p>看别人的攻略后发现有四个字段，于是开始构建查询语句</p><pre class=" language-mssql"><code class="language-mssql">' union select 1,2,group_concat(schema_name),4 from information_schema.schemata; #</code></pre><p>得到库名为cetc004<img src="/2020/07/10/ics-04-1/1.4.JPG" alt="1.4"></p><p>查询到表名为user，接着在查询字段名和字段信息<img src="/2020/07/10/ics-04-1/1.5.JPG" alt="1.5"></p><p>构建查询语句：</p><pre class=" language-mssql"><code class="language-mssql">' union select 1,2,group_concat(column_name),4 from information_schema.columns where table_schema='cetc004' and table_name='user' #</code></pre><p>查询到四个字段名</p><p><img src="/2020/07/10/ics-04-1/1.6.JPG" alt="1.6"></p><p>再往下查询</p><p><img src="/2020/07/10/ics-04-1/1.7.JPG" alt="1.7"></p><p>得到用户名为c3tlwDmIn23密码为2f8667f381ff50ced6a3edc259260ba9</p><p>很显然密码使用md5加密过的</p><p><img src="/2020/07/10/ics-04-1/1.8.JPG" alt="1.8"></p><p>但是因为之前发现注册页面有一个漏洞就是可以同一个用户名反复注册于是借用这个bug来更改密码</p><p><img src="/2020/07/10/ics-04-1/1.9.JPG" alt="1.9"></p><p>登录</p><p><img src="/2020/07/10/ics-04-1/1.10.JPG" alt="1.10"></p><p><img src="/2020/07/10/ics-04-1/1.11.JPG" alt="1.11"></p><p>登录成功，拿到flag</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个题目其实就是sql注入问题，但是在密码这个方面玩了点花样，查到密码是经过加密的，好在这里的注册界面有这个bug可以利用。</p><p>其实一开始我没想到是sql注入，我以为是xss，于是就跑偏了，看来还是不是很熟悉这些，还是要多多努力</p>]]></content>
      
      
      
        <tags>
            
            <tag> XCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/10/hello-world/"/>
      <url>/2020/07/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p><img src="/images/image.jpg" alt="sss"><br>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQLI</title>
      <link href="/2020/07/09/sql%E8%AF%AD%E5%8F%A5%E5%A4%8D%E4%B9%A0/"/>
      <url>/2020/07/09/sql%E8%AF%AD%E5%8F%A5%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><p><strong>例子1：</strong></p><pre class=" language-mssql"><code class="language-mssql">USE schoolGO--声明游标DECLARE st_cursor CURSOR FOR SELECT 学号,姓名,班号 FROM student--打开游标OPEN st_cursor--提取第一行数据FETCH NEXT FROM st_cursor--关闭游标CLOSE st_cursor--释放游标DEALLOCATE st_cursorGO</code></pre><p><strong>例子2：</strong></p><pre class=" language-mssql"><code class="language-mssql">USE schoolALTER TABLE score ADD 等级char(2)GODECLARE st_cursor CURSOR    FOR SELECT 分数FROM score WHERE 分数IS NOT NULLDECLARE @fs int,@dj char(1)OPEN st_cursorFETCH NEXT FROM st_cursor INTO @fsWHILE @@FETCH_STATUS = 0BEGIN  SET @dj=CASE    WHEN @fs>=90 THEN 'A'     WHEN @fs>=80 THEN 'B'     WHEN @fs>=70 THEN 'C'     WHEN @fs>=60 THEN 'D'     ELSE 'E'   END  UPDATE score  SET 等级=@dj  WHERE CURRENT OF st_cursor   FETCH NEXT FROM st_cursor INTO @fsENDCLOSE st_cursorDEALLOCATE st_cursorGOSELECT * FROM score ORDER BY 学号GOALTER TABLE score DROP COLUMN 等级GO</code></pre><h2 id="数据库创建和删除"><a href="#数据库创建和删除" class="headerlink" title="数据库创建和删除"></a>数据库创建和删除</h2><p><strong>例子：</strong></p><pre class=" language-mssql"><code class="language-mssql">use mastergoif exists(select * from sysdatabases where name='TTT')drop database TTTcreate database TTTon(    name='TTT',    filename='D:\DB\TTT.MDF',    size = 10mb,    maxsize=100mb,    filegrowth=10mb)log on (    name='TTT_log',    filename='D:\DB\TTT_log.ldf',    size=2mb,    maxsize=20mb,    filegrowth=1mb)go</code></pre><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><strong>1、建立表索引</strong></p><p>  create index 索引名 on 表名(列名，列名);</p><p><strong>2、删除表索引</strong></p><p>  If exists(select name from sysindexes where name=’索引名’)</p><p>​        drop index 表名.索引名;</p><p><strong>3、查看表索引</strong></p><p>  Select * from sysibm.sysindexes where tbname=’表名’;  —表名区分大小写</p><p><strong>4、查看索引</strong></p><p>​    Exec sp_helpindex 表名</p><p><strong>5、索引禁用</strong></p><p>​    Alter index 索引名 on 表名 disable</p><p><strong>6、索引启用</strong></p><p>​    Alter index 索引名 on 表名 rebuild</p><p><strong>7、修改索引</strong></p><p>​    Alter index 索引名 on 表名 rebuild with (PAD_INDEX=ON,FILLFACTOR=90)</p><p>//将填充因子改为90</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p><strong>1、</strong> <strong>创建视图</strong></p><pre class=" language-mssql"><code class="language-mssql">Create view 视图名As​    Select * from 表名​    【where-------】Go</code></pre><p><img src="/images/image.jpg" alt><br><strong>2、</strong> <strong>删除视图</strong></p><p>If object_id(‘视图名’,’V’) is not null //如果视图存在则删除</p><p>Drop view 视图名</p><p><strong>3、</strong> <strong>查询视图</strong></p><p>Select * from 视图名</p><p><strong>4、</strong> <strong>修改视图</strong></p><p>Alter view 视图名</p><p>As </p><p>select语句</p><p><strong>5、</strong> <strong>更改数据</strong></p><p>Update 视图名 set 列名=‘xxx’ where 列名=‘xxx’</p><p><strong>6、</strong> <strong>插入记录</strong></p><p>Insert into 视图名(列名1，列名2，列名3) values(xxx,xxx,xxx)</p><p><strong>7、</strong> <strong>删除记录</strong></p><p>Delete 视图名 where 列名=‘xxx’</p><p><strong>8、</strong> <strong>查看视图信息</strong></p><p>Exec sp_helptext 视图名</p><p><strong>9、</strong> <strong>重命名视图</strong></p><p>**Exec sp_rename ‘原视图名‘，’现视图名’</p><h2 id="ALTER语句"><a href="#ALTER语句" class="headerlink" title="ALTER语句"></a>ALTER语句</h2><p><strong>1：向表中添加字段</strong></p><p>Alter table [表名] add [列名] 类型</p><p><strong>2:</strong> <strong>删除字段</strong></p><p>Alter table [表名] drop column [列名]</p><p><strong>3:</strong> <strong>修改表中字段类型</strong> <strong>（可以修改列的类型，是否为空）</strong></p><p>Alter table [表名] alter column [列名] 类型</p><p><strong>4</strong>：<strong>添加主键</strong></p><p>Alter table [表名] add constraint [ 约束名] primary key( [列名])</p><p><strong>5</strong>：<strong>添加唯一约束</strong></p><p>Alter table [表名] add constraint [ 约束名] unique([列名])</p><p><strong>6：添加表中某列的默认值</strong></p><p>Alter table [表名] add constraint [约束名] default(默认值) for [列名]<br> <strong>7</strong>：<strong>添加约束</strong></p><p>Alter table [表名] add constraint [约束名] check (内容)</p><p><strong>8:</strong>添加外键约束</p><p> Alter table [表名] add constraint [约束名] foreign key(列名) references 另一表名(列名)</p><p><strong>9:</strong>删除约束</p><p>Alter table [表名] drop constraint [约束名] </p><p><strong>10:</strong>重命名表</p><p>exec sp_rename ‘[原表名]’,’[新表名]’</p><p><strong>11</strong>：重命名列名</p><p>exec sp_rename ‘[表名].[列名]’,’[表名].[新列名]’</p><p> <strong>12：删除主键，以及主键上的索引</strong></p><p>alter table table_name drop constraint clusteredName</p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>l <strong>PRIMARY KEY约束（Q:怎么在创建表的时候选择两个属性作为主键）</strong></p><p><strong>例子</strong></p><pre class=" language-mssql"><code class="language-mssql">create table table7(    c1 int,c2 int, c3 char(5),c4 char(10),     constraint pk_1 primary key(c1,c2))</code></pre><p>l <strong>FOREIGN KEY约束</strong></p><p>l <strong>UNIQUE约束</strong></p><p>l <strong>CHECK约束</strong></p><p>l <strong>NOT NULL（非空性）</strong></p><p>| <strong>表约束</strong></p><p>​      列约束可以作为列定义的一部分，并且仅适用于指定的那个列。表约束的定义与列定义无关，可以适用于表中一个以上的列。列约束和表约束均在创建表或修改表时通过<strong>CONSTRAINT</strong>关键字来指定。</p><p>​    当一个约束中必须包含一个以上的列时，必须使用表约束。例如，如果一个表的主键内有两个或两个以上的列，则必须使用表约束将这两个列加入主键内。</p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p> <strong>1.规则创建</strong></p><p> create rule 规则名 as 规则</p><p><strong>2.绑定规则</strong></p><p>sp_bindrule ‘规则名’，’绑定规则的表和列名’</p><p>例：EXEC sp_bindrule ‘rule1’,’table9.c1’</p><p><strong>3.解除绑定</strong></p><p>exec sp_unbindrule ‘表名.列名’</p><p><strong>4.删除规则</strong></p><p>drop rule 规则名</p><h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><h3 id="一、显式事务"><a href="#一、显式事务" class="headerlink" title="一、显式事务"></a>一、显式事务</h3><p><strong>1.启动事务</strong></p><p>begin tran【saction】</p><p><strong>2.结束事务</strong></p><p>commit 【train【saction】】</p><p><strong>3.回滚事务</strong></p><p>rollback【tran【saction】】</p><p><strong>4.例子</strong></p><pre class=" language-mssql"><code class="language-mssql">use testgobegin transaction    insert into table7 values(0,0,'dd','123')commitgoselect* from table7go</code></pre><p><strong>5.保存点</strong></p><p>save tran【saction】 保存点名称</p><p><strong>例子</strong></p><pre class=" language-mssql"><code class="language-mssql">use test gobegin transaction    insert into table7 values(0,0,'ee','456')save transaction save1    insert into table7 values(0,0,'ff','789')rollback transaction save1commit transactiongoselect * from table7go</code></pre><p><strong>PS：</strong>如创建、删除和修改数据库的操作是不能撤销的</p><h3 id="二、自动提交事务"><a href="#二、自动提交事务" class="headerlink" title="二、自动提交事务"></a>二、自动提交事务</h3><h3 id="三、隐性事务"><a href="#三、隐性事务" class="headerlink" title="三、隐性事务"></a>三、隐性事务</h3><h3 id="四、事务和异常处理"><a href="#四、事务和异常处理" class="headerlink" title="四、事务和异常处理"></a>四、事务和异常处理</h3><p>直接上例子：</p><pre class=" language-mssql"><code class="language-mssql">use testgocreate table table3(no char(5) unique)gobegin try    begin transaction mytrans        insert into table3 values('aaa')        insert into table3 values('aaa')    commit transaction mytransend trybegin catch    select error_number() as'错误号',error_message()as'错误信息'    rollback transaction mytransend catchgo</code></pre><p><strong>分析：该程序在test数据库中建立一个表table3，含一个唯一值的列no。事务Mytrans用于插入2个相同的记录，由CATCH捕捉到错误，然后执行事务回滚。程序执行时显示的出错消息如图所示。该程序执行后，会建立table3表，但表中没有任何记录。</strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="一、标量值函数"><a href="#一、标量值函数" class="headerlink" title="一、标量值函数"></a>一、标量值函数</h3><p>返回单个数据值</p><p><strong>（使用create function语句创建）</strong></p><pre class=" language-mssql"><code class="language-mssql">CREATE FUNCTION 函数名( [ {@参数名 [AS] 参数数据类型 [ =默认值 ] [ READONLY ] } [ ,…n ]  ])RETURNS 返回数据类型 [AS]    BEGIN         函数体        RETURN 标量表达式    END</code></pre><p>例子：</p><pre class=" language-mssql"><code class="language-mssql">use testgoif object_ID('cu','FN') is not nulldrop function cugocreate function cu (@c1 int ,@c2 int,@c3 int)returns intasbegin    return(@c1*@c2*@c3)endgoprint '立方体体积为：'+cast(dbo.cu(6,4,3) as char(10))go</code></pre><h3 id="二、内联表值函数"><a href="#二、内联表值函数" class="headerlink" title="二、内联表值函数"></a>二、内联表值函数</h3><p>返回table数据类型（无begin…end语句块构成的函数体）</p><p><strong>内联表值函数的特点是返回table变量，自动将其中的SELECT语句（只能有一个SELECT语句，因而不需要BEGIN…END括起来）的查询结果插入到该变量中，然后将该变量作为返回值返回。</strong></p><p><strong>（使用create function语句创建）</strong></p><pre class=" language-mssql"><code class="language-mssql">CREATE FUNCTION 函数名( [ {@参数名 [AS] 参数数据类型 [ =默认值 ] [ READONLY ] } [ ,…n ]  ])RETURNS TABLE [AS] RETURN [(]select语句[)]</code></pre><p><strong>例子：</strong></p><pre class=" language-mssql"><code class="language-mssql">use testgoif object_id('f1','if') is not null drop function f1gocreate function f1(@c1 char(10))    returns tableasreturn(    select t.c1,t.c3    from table7 t    where t.c4=@c1)goselect * from f1('456')go</code></pre><h3 id="三、多语句表值函数"><a href="#三、多语句表值函数" class="headerlink" title="三、多语句表值函数"></a>三、多语句表值函数</h3><p>  多语句表值需要使用BEGIN…END，其中可以包含多个T-SQL语句，可以包含聚合函数。返回值表中的数据是由函数体中insert语句插入的。</p><p><strong>例子：</strong></p><pre class=" language-mssql"><code class="language-mssql">use testgoif object_id('f2','tf') is not null    drop function f2gocreate function f2(@c1 char(10))    returns @st table    (        c1 int,        c4 char(10)    )asbegin    insert @st    select table7.c1,table7.c4    from table7    where table7.c3=@c1returnendgoselect * from f2('dd')go</code></pre><p><strong>删除用户定义函数</strong></p><p>drop function 函数名</p><p><strong>例题：</strong></p><p>设计一个用户定义函数funstud3，根据学号得到该学生的学号、姓名、课程名和成绩等级（分数≥90为优秀，否则分数≥80为良好，否则分数≥70为中等，否则分数≥60为及格，其他为不及格）列表。并输出学号为‘105’的学生结果集</p><pre class=" language-mssql"><code class="language-mssql">use School3148if object_id('f3','TF') is not null    drop function f3gocreate function f3(@num int)returns @st table(    sno int,    name char(10),    cname char(20),    rank1 char(6))asbegin    insert @st    select student3148.学号,Student3148.姓名,course.CourseName,        case         when score.Score>=90 then 'A'        when score.score>=80 then 'B'        when score.score>=70 then 'C'        when score.score>=60 then 'D'        when score.score<60 then 'E'        end as '等级'    from Student3148,course,score    where Student3148.学号=score.Num and score.CourseNum=course.CourseNum and student3148.学号=@num    order by course.CourseName    returnendgo select * from f3('2018123148')</code></pre><p>另外这一题也可以用内联表值函数做</p><pre class=" language-mssql"><code class="language-mssql">use school3148goif object_id('f1','if') is not null    drop function f1gocreate function f1(@num char(10))returns tableasreturn(    select student3148.学号,Student3148.姓名,course.CourseName,        case         when score.Score>=90 then 'A'        when score.score>=80 then 'B'        when score.score>=70 then 'C'        when score.score>=60 then 'D'        when score.score<60 then 'E'        end as '等级'    from Student3148,course,score    where Student3148.学号=score.Num and score.CourseNum=course.CourseNum and student3148.学号=@num)goselect *from f1('2018123148')go</code></pre><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p><strong>1.创建存储过程</strong></p><p>create procedure 存储过程名 as sql语句</p><p><strong>例子：</strong></p><pre class=" language-mssql"><code class="language-mssql">use testgoif object_id('stud','P') is not null drop procedure studgocreate procedure studas    select table7.c1,table7.c3    from table7go</code></pre><p>带参数的的存储过程的创建</p><p><strong>例子：</strong></p><pre class=" language-mssql"><code class="language-mssql">use test goif object_id('t7','p') is not nulldrop procedure t7gocreate procedure t7(@t char(10))as    select t.c1,t.c2,t.c3    from table7 t    where t.c4=@tgo</code></pre><p>也可以在创建时为参数指定默认值</p><pre class=" language-mssql"><code class="language-mssql">(@t char(10)='132')</code></pre><p><strong>带返回参数的存储过程</strong></p><p>在创建存储过程的时候在参数后面添加 output</p><p><strong>例子：</strong></p><pre class=" language-mssql"><code class="language-mssql">use test goif object_id('t7','p') is not nulldrop procedure t7gocreate procedure t7(@t char(10),@o1 int output,@o2 int output,@o3 char(5) output)as    select @o1=t.c1,@o2=t.c2,@o3=t.c3    from table7 t    where t.c4=@tgodeclare @r1 intdeclare @r2 intdeclare @r3 char(5)exec t7 '456',@r1 output,@r2 output,@r3 outputselect 'c1'=@r1,'c2'=@r2,'c3'=@r3go</code></pre><p><strong>2.执行存储过程</strong></p><p>exec 存储过程名</p><pre class=" language-mssql"><code class="language-mssql">exec stud</code></pre><p>exec 存储过程名 参数</p><pre class=" language-mssql"><code class="language-mssql">exec t7 123</code></pre><p><strong>3.修改存储过程</strong></p><pre><code>ALTER PROC[EDURE] 存储过程名[{参数列表}]    　　AS SQL语句</code></pre><p><strong>例子：</strong></p><pre><code>alter procedure t6 as    select c1 from table7go</code></pre><p><strong>4.修改存储过程</strong></p><p>drop procedure 用户存储过程列表</p><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>l <strong>DML触发器：在执行数据操作语言（DML）事件时被调用的触发器，包括INSERT、UPDATE和DELETE语句。</strong></p><p>l <strong>DDL触发器：在执行数据定义语言（DDL）事件时被调用的触发器，包括CREATE、ALTER和DROP语句。</strong></p><p>l <strong>登录触发器：为响应登录事件而触发的存储过程。</strong></p><h3 id="一、DML事件"><a href="#一、DML事件" class="headerlink" title="一、DML事件"></a>一、DML事件</h3><p>l <strong>AFTER触发器：在执行触发事件之后执行AFTER触发器。如果违反了约束，则永远不会执行AFTER触发器；<em>因此，这些触发器不能用于任何可能防止违反约束的处理</em>。</strong></p><p>l <strong>INSTEAD OF触发器：INSTEAD OF触发器替代触发器语句的标准操作。因此，触发器可用于对一个或多个列执行错误或值检查，<em>然后在插入、更新或删除行之前执行其他操作</em>。</strong></p><p><strong>1.创建触发器</strong></p><pre class=" language-mssql"><code class="language-mssql">CREATE TRIGGER  触发器名 ON {表名 | 视图名} [WITH ENCRYPTION] {    { {FOR | AFTER | INSTEAD OF} {[INSERT] [,] [UPDATE][,] [DELETE]}          [NOT FOR REPLICATION]          AS           [{ IF UPDATE (列名)               [{ AND | OR } UPDATE (列名)] […n] } ]           SQL语句 […n ]     } } </code></pre><p><strong>例子：</strong></p><pre class=" language-mssql"><code class="language-mssql">use testgocreate trigger tgontable7 after insert,update,deleteas    select * from table7goinsert table7(c1) values(1)</code></pre><p><strong>2.删除触发器</strong></p><p>drop trigger 触发器名</p><p><strong>3.禁用触发器</strong></p><p>disable trigger  触发器名 on 表名</p><p><strong>4.启用触发器</strong></p><p>enable trigger 触发器 on 表名</p><p><strong>5.instead of 触发器</strong></p><p>–例子：</p><pre class=" language-mssql"><code class="language-mssql">use testgoif object_id('trigscore','TR') is not null drop trigger trigscoregocreate trigger trigscore on table7instead of insertasif not exists(select * from table7where c1=(select c1 from inserted))    begin        rollback transaction        print'要处理的字段不存在'    endelse    begin        insert into table7 select * from inserted        print'已经成功处理记录'    endgoinsert table7(c1,c4) values(100,'lolol')</code></pre><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><p>–例子：</p><pre class=" language-mssql"><code class="language-mssql">use testgoif object_id('trig','TR') is not null drop trigger trig gocreate trigger trig    on table7 after insertasbegin    declare @temp int    select @temp=inserted.c1 from inserted    if exists(select c1 from table7 where c1=@temp)    begin        raiserror('数据重复，不能插入',16,1)        rollback    endendgoinsert table7(c1) values(1)</code></pre><h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><p>–例子：</p><pre class=" language-mssql"><code class="language-mssql">use testgoif object_id('trigno','TR') is not null drop trigger trignogocreate trigger trigno on table7 after updateasif update (c4)    begin        raiserror('不能修改c4',16,2)        rollback    endgoupdate table7 set c4='7777' where c3='dd'</code></pre><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p>–例子：</p><pre class=" language-mssql"><code class="language-mssql">use testgoif object_id('trigclass','TR') is not nulldrop trigger trigcalssgocreate trigger trigclass on table7after deleteas    if exists(select * from deleted where c2=102)    begin        raiserror('不能删除c2=102的记录',16,2)        rollback    endgodelete table7 where c2=102go</code></pre><h3 id="二、DDL事件"><a href="#二、DDL事件" class="headerlink" title="二、DDL事件"></a>二、DDL事件</h3><p><strong>创建语句：</strong></p><pre class=" language-mssql"><code class="language-mssql">CREATE TRIGGER 触发器名称ON {ALL SERVER|DATABASE} {FOR|AFTER} {event_type|event_group}[,…n]AS SQL语句</code></pre><p><strong>例子：</strong></p><pre class=" language-mssql"><code class="language-mssql">use testgocreate trigger safeon database after drop_table,alter_tableas    begin        raiserror('不能修改表结构',16,2)        rollback    endgoalter table table7 add c5 char(10)</code></pre><h4 id="create"><a href="#create" class="headerlink" title="create"></a>create</h4><h4 id="alter"><a href="#alter" class="headerlink" title="alter"></a>alter</h4><h4 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h4><h3 id="三、登陆事件"><a href="#三、登陆事件" class="headerlink" title="三、登陆事件"></a>三、登陆事件</h3><h4 id="logon"><a href="#logon" class="headerlink" title="logon"></a>logon</h4><p>–例子：</p><pre class=" language-mssql"><code class="language-mssql">USE masterGOCREATE TRIGGER triglogin ON ALL SERVERFOR CREATE_LOGINAS   PRINT '不允许建立登录账号'   ROLLBACKGOcreate login abc with password = '123456'</code></pre><h3 id="四、inserted表和deleted表"><a href="#四、inserted表和deleted表" class="headerlink" title="四、inserted表和deleted表"></a>四、inserted表和deleted表</h3><p>l <strong>deleted表用于存储DELETE和UPDATE语句所影响的行的副本。在执行DELETE或UPDATE语句时，行从触发器表中删除，并传输到deleted表中。deleted表和触发器表通常没有相同的行。</strong></p><p>l <strong>inserted表用于存储INSERT和UPDATE语句所影响的行的副本。在一个插入或更新事务处理中，新建行被同时添加到inserted表和触发器表中。inserted表中的行是触发器表中新行的副本。</strong></p><h3 id="五、使用ALTER-TRIGGER语句修改触发器"><a href="#五、使用ALTER-TRIGGER语句修改触发器" class="headerlink" title="五、使用ALTER TRIGGER语句修改触发器"></a>五、使用ALTER TRIGGER语句修改触发器</h3><pre class=" language-mssql"><code class="language-mssql">ALTER TRIGGER 触发器名称 ON( 表名 | 视图名 ) [ WITH ENCRYPTION ] {     { (FOR | AFTER | INSTEAD OF) {[DELETE] [,] [INSERT] [,] [UPDATE]   }        [NOT FOR REPLICATION]        AS        SQL语句 […n]    }       |  { (FOR | AFTER | INSTEAD OF) { [INSERT] [,] [UPDATE] }            [NOT FOR REPLICATION]           AS              {IF UPDATE(列)                 [ { AND | OR } UPDATE (列) ] […n]             SQL语句 […n]         } }</code></pre><h2 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h2><h3 id="一、登录账号"><a href="#一、登录账号" class="headerlink" title="一、登录账号"></a>一、登录账号</h3><h4 id="1-创建登录账号"><a href="#1-创建登录账号" class="headerlink" title="1.创建登录账号"></a>1.创建登录账号</h4><p>create login 登录名 with 【password=’密码’】</p><h4 id="2-修改和删除登录名"><a href="#2-修改和删除登录名" class="headerlink" title="2.修改和删除登录名"></a>2.修改和删除登录名</h4><p>alter login 登录名 with 【password=‘密码’，name=新的登录名称】 </p><p>drop login 登录名</p><h3 id="二、用户账号"><a href="#二、用户账号" class="headerlink" title="二、用户账号"></a>二、用户账号</h3><h4 id="1-创建用户账号"><a href="#1-创建用户账号" class="headerlink" title="1.创建用户账号"></a>1.创建用户账号</h4><p>create user 用户名 </p><p>例子：</p><pre class=" language-mssql"><code class="language-mssql">create user u1 for login lo1 with default_schema=dbo</code></pre><h4 id="2-修改用户账号"><a href="#2-修改用户账号" class="headerlink" title="2.修改用户账号"></a>2.修改用户账号</h4><p>alter user 用户名 with name=新用户名</p><h4 id="3-删除用户账号"><a href="#3-删除用户账号" class="headerlink" title="3.删除用户账号"></a>3.删除用户账号</h4><p>drop user 用户名</p><h3 id="三、权限和角色"><a href="#三、权限和角色" class="headerlink" title="三、权限和角色"></a>三、权限和角色</h3><h4 id="1-授予权限"><a href="#1-授予权限" class="headerlink" title="1.授予权限"></a>1.授予权限</h4><p>例子：</p><pre class=" language-mssql"><code class="language-mssql">grant alter,delete,insert,select,update on table7 to user1</code></pre><h4 id="2-禁止或撤销权限"><a href="#2-禁止或撤销权限" class="headerlink" title="2.禁止或撤销权限"></a>2.禁止或撤销权限</h4><p>禁止：</p><pre class=" language-mssql"><code class="language-mssql">deny delete on table7 to user1</code></pre><p>撤销：</p><pre class=" language-mssql"><code class="language-mssql">remoke create table to user1</code></pre><h4 id="3-角色"><a href="#3-角色" class="headerlink" title="3.角色"></a>3.角色</h4>]]></content>
      
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
